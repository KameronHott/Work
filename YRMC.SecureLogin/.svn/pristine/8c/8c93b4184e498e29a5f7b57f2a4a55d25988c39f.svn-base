using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Code.Utilities.Extensions;
using System.Runtime.InteropServices;

namespace YRMC.SecureLogin.Web.Controllers
{
    public class LoginController : Controller
    {
        [AcceptVerbs(HttpVerbs.Get)]
        public JsonResult Index(Guid entryID)
        {
            Business.Lists.Login login = Business.Lists.Login.GetByEntryID(entryID);

            return Json(new
            {
                id = login.ID,
                entryid = login.EntryID,
                categoryid = login.CategoryID,
                roleid = login.RoleID,
                username = login.UserName,
                description = login.Description
            }, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public JsonResult List(string searchBy, string searchText)
        {
            Business.Searches.Logins logins = Business.Searches.Logins.GetBySearch(searchBy, searchText);

            return Json(logins                
                .Select(o => new
                {
                    entryid = o.EntryID,
                    categoryid = o.CategoryID,
                    categoryname = o.CategoryName,
                    rolename = o.RoleName,
                    description = o.Description,
                    username = o.UserName,
                }), JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public JsonResult Logs(Guid entryId)
        {
            Business.Searches.Logs logs = Business.Searches.Logs.GetByEntryID(entryId);
            return Json(logs.Select(o => new
                {
                    modifieddate = o.ModifiedDate.ToString(System.Xml.XmlDateTimeSerializationMode.RoundtripKind),
                    madeby = new System.Security.Principal.SecurityIdentifier(o.MadeBy).Translate(typeof(System.Security.Principal.NTAccount)).ToString(),
                    actiondone = o.ActionDone
                }), JsonRequestBehavior.AllowGet);
        }
        
        [AcceptVerbs(HttpVerbs.Post)]
        public JsonResult Create(Guid categoryID, Guid roleID, string description, string userName, string password)
        {
            Business.Edits.Login login = Business.Edits.Login.Create();

            try
            {
                login.EntryID = login.ID;
                login.CategoryID = categoryID;
                login.RoleID = roleID;
                login.UserName = userName;
                login.Password = password;
                login.Description = description;
                login.Active = true;
                login.Save();

                Business.Edits.Log.WriteEntry("New login created", roleID, login.ID, login.EntryID);

                // Return HTTP Status successful.
                Response.StatusCode = 200;
                return Json(login.ID);
            }
            catch (Csla.Rules.ValidationException e)
            {
                // Http Status Code conflict.
                Response.StatusCode = 409;
                return Json(new
                {
                    message = e.Message,
                    brokenRules = login.BrokenRulesCollection.Select(o => new
                    {
                        description = o.Description
                    })
                });
            }
        }

        [AcceptVerbs(HttpVerbs.Get)]
        public JsonResult Password(Guid entryID)
        {
            Business.Lists.Login login = Business.Lists.Login.GetByEntryID(entryID);
            Business.Edits.Log.WriteEntry("Password Viewed", Guid.Empty, login.ID, login.EntryID); 
            return Json(login.Password, JsonRequestBehavior.AllowGet);
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public void Update(Guid id, Guid categoryID, Guid roleID, string username, string password, string description)
        {
            Business.Edits.Login oldLogin = Business.Edits.Login.GetByID(id);

            if (oldLogin.Active)
            {
                Business.Edits.Login newLogin = Business.Edits.Login.Create();
                newLogin.EntryID = oldLogin.EntryID;
                newLogin.CategoryID = (categoryID == Guid.Empty) ? oldLogin.CategoryID : categoryID;
                newLogin.RoleID = (roleID == Guid.Empty) ? oldLogin.RoleID : roleID;
                newLogin.Description = description;
                newLogin.UserName = username;

                if (password != "********" && !password.IsNullOrWhiteSpace())
                {
                    newLogin.Password = password;
                }
                else
                {
                    newLogin.Password = oldLogin.Password;
                }

                newLogin.Active = true;
                newLogin.ModifiedDate = DateTime.UtcNow;

                oldLogin.Active = false;

                // Has anything changed?
                if (oldLogin.CategoryID != newLogin.CategoryID ||
                    oldLogin.RoleID != newLogin.RoleID ||
                    oldLogin.Description != newLogin.Description ||
                    oldLogin.UserName != newLogin.UserName ||
                    oldLogin.Password != newLogin.Password)
                {
                    oldLogin.Save();
                    newLogin.Save();

                    Business.Edits.Log.WriteEntry("Login information changed", newLogin.RoleID, newLogin.ID, newLogin.EntryID);
                }

                // Return HTTP Status successful.
                Response.StatusCode = 200;
            }
            else
            {
                // Return HTTP Status Error Code, loginID was already inactivated.
                Response.StatusCode = 409;
            }
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public void Delete(Guid loginID)
        {
            Business.Edits.Login login = Business.Edits.Login.GetByID(loginID);

            if (login.Active)
            {
                login.Active = false;
                login.Save();

                Business.Edits.Log.WriteEntry("Login deleted", Guid.Empty, loginID, login.EntryID);
            }
            else
            {
                // Return HTTP Status Error Code, loginID was already deleted.
                Response.StatusCode = 409;
            }
        }
    }
}
